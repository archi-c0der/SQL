{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9   \b Complete SQL\par
\b0 create database collage; \par
  create database if not exists companyX;\par
  use collage;\par
  use companyX;\par
   create table collage(stud_id int primary key,name varchar(50), age int not null);\par
 --inserting values\par
  insert into collage values(1,"archi",20);\par
   insert into collage values(2,"shivam",21);\par
    insert into collage values(3,"sinha",19);\par
   insert into collage(stud_id,name,age) values(4,"jha",23);\par
  -- altering table\par
   alter  table collage modify age int check (age>=18);\par
     alter table collage add roll_no int;\par
     alter table collage add grade varchar(1);\par
--updtaing\par
   update collage set grade="O" where stud_id=1;\par
\tab update collage set grade="A"  where stud_id=2;\par
\tab update collage set grade="C"  where stud_id=3;\par
\tab update collage set grade="E"  where stud_id=4;   \par
      alter table collage add marks int;\par
       alter table collage add city varchar(20);\par
       update collage set roll_no=101 where stud_id=1;\par
       update collage set roll_no=102 where stud_id=2;\par
       update collage set roll_no=103 where stud_id=3;\par
       update collage set roll_no=104 where stud_id=4;\par
\tab update collage set city= "delhi" where stud_id=4;\par
     update collage set city= "patna" where stud_id=3;\par
\tab  update collage set city= "kokata" where stud_id=2;\par
\tab  update collage set city= "delhi" where stud_id=1;\par
     update collage set marks=98 where stud_id=1;\par
       update collage set  marks=87 where stud_id=2;\par
       update collage set  marks=67 where stud_id=3;\par
       update collage set  marks=92 where stud_id=4;\par
     --queries\par
     select name,age from collage;\par
     select name from collage;\par
     select * from collage where age>19;\par
     select* from collage where age>20 or city= "kokata";\par
      select* from collage where city not in("delhi", "kokata");\par
      select*from collage limit 3;\par
      select *from student where marks>80;\par
           select*from collage where age>19 limit 3;\par
\tab   select* from collage order by roll_no desc;\par
      select max(marks)from collage;\par
       select min(marks)from collage;\par
        select avg(marks)from collage;\par
        select city,count(name) from collage group by city;\par
        select city,avg(marks) from collage group by city order by avg(marks);\par
         select city,avg(marks) from collage group by city order by city;\par
          select city,count(name) from collage group by city having max(marks);\par
\tab\tab  select city,count(name) from collage group by city having max(marks)>80;\par
         update collage set marks= marks +1;\par
         set sql_safe_updates=0;\par
         select* from collage where marks between 90 and 100;\par
\tab select city,count(name) from collage where roll_no>101 group by city having max(marks);\par
    alter table collage rename to student;\par
     select*from student;\par
   create table employeeX(emp_id int primary key,name varchar(50), salary int );\par
   insert into employeeX values(1,"archi",30000);\par
    insert into employeeX values(2,"shivam",40000);\par
     insert into employeeX values(3,"ANUJ",35000);\par
     alter table employeeX modify salary int default 25000;\par
   \par
   insert into employeeX (emp_id, name)values(4,"harshi");\par
   show databases;\par
   show tables;\par
   select*from employeeX;\par
create table dept(id int primary key,name varchar(50));\par
insert into dept values(101,"english"),(102,"physics"),(103,"chemistry"),(104,"maths");\par
select*from dept;\par
alter table dept change name  subj_name varchar(20);\par
create table teacher(id int primary key,name varchar(50), dept_id int, foreign key(dept_id)references dept(id)on update cascade on delete cascade);\par
insert into teacher values(101,"adam",101),(102,"ceaser",102),(103,"eve",102),(104,"kia",103),(105,"liza",104);\par
\par
-- joins\par
\par
create table dept(id int primary key,name varchar(50));\par
insert into student(stud_id,name,age) values(5,"khushi",23);\par
insert into dept values(101,"english"),(102,"physics"),(103,"chemistry"),(104,"maths");\par
select*from student;\par
select*from dept;\par
select roll_no,name,age from student inner join dept on roll_no= dept.id;\par
select * from student left join dept on roll_no =dept.id ;\par
select* from student right join dept on roll_no= dept.id;\par
select* from student left join dept on roll_no= dept.id union select* from student right join dept on roll_no= dept.id;\par
select * from student left join dept on roll_no =dept.id  where dept.id is null;\par
select* from student right join dept on roll_no= dept.id where student.roll_no is null;\par
select student.name,stud_id, dept.subj_name from student left join dept on roll_no =dept.id ;\par
select name from student union select subj_name from dept;\par
select roll_no from student union all select id from dept;\par
select roll_no from student union  select id from dept;\par
select avg(marks) from student;\par
select name,marks from student where marks >87.000;\par
select name,marks from student where marks >(select avg(marks) from student);\par
select name,roll_no from student where roll_no in (select roll_no from student where roll_no %2 =0);\par
create view view1 as select roll_no,name,marks from student;\par
select*from view1;\par
select*from view1 where marks>80;\par
\par
\par
-- questions from leetcode\par
\par
create database Ques;\par
use Ques;\par
-- ques1\par
-- product_id is the primary key (column with unique values) for product table.\par
-- low_fats is an ENUM (category) of type ('Y', 'N') where 'Y' means this product is low fat and 'N' means it is not.\par
-- recyclable is an ENUM (category) of types ('Y', 'N') where 'Y' means this product is recyclable and 'N' means it is not.\par
-- Write a solution to find the ids of products that are both low fat and recyclable.\par
Create table If Not Exists Products (product_id int, low_fats ENUM('Y', 'N'), recyclable ENUM('Y','N'));\par
Truncate table Products;\par
insert into Products (product_id, low_fats, recyclable) values ('0', 'Y', 'N');\par
insert into Products (product_id, low_fats, recyclable) values ('1', 'Y', 'Y');\par
insert into Products (product_id, low_fats, recyclable) values ('2', 'N', 'Y');\par
insert into Products (product_id, low_fats, recyclable) values ('3', 'Y', 'Y');\par
insert into Products (product_id, low_fats, recyclable) values ('4', 'N', 'N');\par
-- ans\par
select product_id from products where low_fats='y' and recyclable='y';\par
\par
-- Ques 2\par
-- id is the primary key column for this table.\par
-- Each row of this table indicates the id of a customer, their name, and the id of the customer who referred them.\par
-- Find the names of the customer that are not referred by the customer with id = 2.\par
Create table If Not Exists Customer (id int, name varchar(25), referee_id int);\par
Truncate table Customer;\par
insert into Customer (id, name) values ('1', 'Will' );\par
insert into Customer (id, name) values ('2', 'Jane');\par
insert into Customer (id, name, referee_id) values ('3', 'Alex', '2');\par
insert into Customer (id, name) values ('4', 'Bill');\par
insert into Customer (id, name, referee_id) values ('5', 'Zack', '1');\par
insert into Customer (id, name, referee_id) values ('6', 'Mark', '2');\par
-- ans\par
select name from customer where referee_id is null or referee_id !=2;\par
\par
-- ques 3\par
-- name is the primary key (column with unique values) for world table.\par
-- Each row of this table gives information about the name of a country, the continent to which it belongs, its area, the population, and its GDP value.\par
-- A country is big if:it has an area of :at least three million (i.e., 3000000 km2), or it has a population of at least twenty-five million (i.e., 25000000).\par
-- Write a solution to find the name, population, and area of the big countries.\par
\par
Create table If Not Exists World (name varchar(255), continent varchar(255), area int, population int, gdp bigint);\par
Truncate table World;\par
insert into World (name, continent, area, population, gdp) values ('Afghanistan', 'Asia', '652230', '25500100', '20343000000');\par
insert into World (name, continent, area, population, gdp) values ('Albania', 'Europe', '28748', '2831741', '12960000000');\par
insert into World (name, continent, area, population, gdp) values ('Algeria', 'Africa', '2381741', '37100000', '188681000000');\par
insert into World (name, continent, area, population, gdp) values ('Andorra', 'Europe', '468', '78115', '3712000000');\par
insert into World (name, continent, area, population, gdp) values ('Angola', 'Africa', '1246700', '20609294', '100990000000');\par
-- ans\par
select name,population,area from world where area >=3000000 or population >=25000000;\par
-- ques4\par
-- There is no primary key (column with unique values) for views table, the table may have duplicate rows.\par
-- Each row of this table indicates that some viewer viewed an article (written by some author) on some date. Note that equal author_id and viewer_id indicate the same person.\par
-- Write a solution to find all the authors that viewed at least one of their own articles. Return the result table sorted by id in ascending order.\par
Create table If Not Exists Views (article_id int, author_id int, viewer_id int, view_date date);\par
Truncate table Views;\par
insert into Views (article_id, author_id, viewer_id, view_date) values ('1', '3', '5', '2019-08-01');\par
insert into Views (article_id, author_id, viewer_id, view_date) values ('1', '3', '6', '2019-08-02');\par
insert into Views (article_id, author_id, viewer_id, view_date) values ('2', '7', '7', '2019-08-01');\par
insert into Views (article_id, author_id, viewer_id, view_date) values ('2', '7', '6', '2019-08-02');\par
insert into Views (article_id, author_id, viewer_id, view_date) values ('4', '7', '1', '2019-07-22');\par
insert into Views (article_id, author_id, viewer_id, view_date) values ('3', '4', '4', '2019-07-21');\par
insert into Views (article_id, author_id, viewer_id, view_date) values ('3', '4', '4', '2019-07-21');\par
-- ans\par
select distinct author_id as id from views where author_id=viewer_id order by author_id ASC ;\par
\par
# ques 5\par
-- tweet_id is the primary key (column with unique values) for this table. This table contains all the tweets in a social media app.\par
-- Write a solution to find the IDs of the invalid tweets. The tweet is invalid if the number of characters used in the content of the tweet is strictly greater than 15.\par
Create table If Not Exists Tweets(tweet_id int, content varchar(50));\par
Truncate table Tweets;\par
insert into Tweets (tweet_id, content) values ('1', 'Vote for Biden');\par
insert into Tweets (tweet_id, content) values ('2', 'Let us make America great again!');\par
# ans\par
select tweet_id from tweets where  length(content)>15;\par
\par
#ques 6\par
-- id is the primary key (column with unique values) for Employees table.Each row of this table contains the id and the name of an employee in a company.\par
-- (id, unique_id) is the primary key (combination of columns with unique values) for EmployeeUNI table. Each row of this table contains the id and the corresponding unique id of an employee in the company.\par
Create table If Not Exists Employees (id int, name varchar(20));\par
Create table If Not Exists EmployeeUNI (id int, unique_id int);\par
Truncate table Employees;\par
insert into Employees (id, name) values ('1', 'Alice');\par
insert into Employees (id, name) values ('7', 'Bob');\par
insert into Employees (id, name) values ('11', 'Meir');\par
insert into Employees (id, name) values ('90', 'Winston');\par
insert into Employees (id, name) values ('3', 'Jonathan');\par
Truncate table EmployeeUNI;\par
insert into EmployeeUNI (id, unique_id) values ('3', '1');\par
insert into EmployeeUNI (id, unique_id) values ('11', '2');\par
insert into EmployeeUNI (id, unique_id) values ('90', '3');\par
-- ans\par
select  EmployeeUNI.unique_id,Employees.name from Employees left join EmployeeUNI on Employees.id=EmployeeUNI.id ;\par
\par
# ques 7\par
-- (sale_id, year) is the primary key (combination of columns with unique values) of sales table.product_id is a foreign key (reference column) to Product table.\par
-- Each row of this table shows a sale on the product product_id in a certain year \par
-- product_id is the primary key (column with unique values) of product table. Each row of this table indicates the product name of each product.\par
 # Write a solution to report the product_name, year, and price for each sale_id in the Sales table.\par
 Create table If Not Exists Sales (sale_id int, product_id int, year int, quantity int, price int);\par
Create table If Not Exists Product (product_id int, product_name varchar(10));\par
Truncate table Sales;\par
insert into Sales (sale_id, product_id, year, quantity, price) values ('1', '100', '2008', '10', '5000');\par
insert into Sales (sale_id, product_id, year, quantity, price) values ('2', '100', '2009', '12', '5000');\par
insert into Sales (sale_id, product_id, year, quantity, price) values ('7', '200', '2011', '15', '9000');\par
Truncate table Product;\par
insert into Product (product_id, product_name) values ('100', 'Nokia');\par
insert into Product (product_id, product_name) values ('200', 'Apple');\par
insert into Product (product_id, product_name) values ('300', 'Samsung');\par
-- ans\par
select product.product_name,sales.year,price from product right join sales on product.product_id=sales.product_id;\par
\par
#ques 8\par
-- visit_id is the column with unique values for visits table.This table contains information about the customers who visited the mall.\par
 -- transaction_id is column with unique values for transactions table. This table contains information about the transactions made during the visit_id.\par
# Write a solution to find the IDs of the users who visited without making any transactions and the number of times they made these types of visits.\par
Create table If Not Exists Visits(visit_id int, customer_id int);\par
Create table If Not Exists Transactions(transaction_id int, visit_id int, amount int);\par
Truncate table Visits;\par
insert into Visits (visit_id, customer_id) values ('1', '23');\par
insert into Visits (visit_id, customer_id) values ('2', '9');\par
insert into Visits (visit_id, customer_id) values ('4', '30');\par
insert into Visits (visit_id, customer_id) values ('5', '54');\par
insert into Visits (visit_id, customer_id) values ('6', '96');\par
insert into Visits (visit_id, customer_id) values ('7', '54');\par
insert into Visits (visit_id, customer_id) values ('8', '54');\par
Truncate table Transactions;\par
insert into Transactions (transaction_id, visit_id, amount) values ('2', '5', '310');\par
insert into Transactions (transaction_id, visit_id, amount) values ('3', '5', '300');\par
insert into Transactions (transaction_id, visit_id, amount) values ('9', '5', '200');\par
insert into Transactions (transaction_id, visit_id, amount) values ('12', '1', '910');\par
insert into Transactions (transaction_id, visit_id, amount) values ('13', '2', '970');\par
-- ans\par
select customer_id,count(visits.visit_id) as count_no_trans from visits left join transactions on visits.visit_id= transactions.visit_id\par
 where transaction_id is null  group by visits.customer_id ;\par
\par
 \par
}
 